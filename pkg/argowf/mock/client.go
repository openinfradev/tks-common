// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_argowf is a generated GoMock package.
package mock_argowf

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	argowf "github.com/openinfradev/tks-common/pkg/argowf"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetWorkflow mocks base method.
func (m *MockClient) GetWorkflow(namespace, workflowName string) (*argowf.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", namespace, workflowName)
	ret0, _ := ret[0].(*argowf.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow.
func (mr *MockClientMockRecorder) GetWorkflow(namespace, workflowName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockClient)(nil).GetWorkflow), namespace, workflowName)
}

// GetWorkflowTemplates mocks base method.
func (m *MockClient) GetWorkflowTemplates(namespace string) (*argowf.GetWorkflowTemplatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowTemplates", namespace)
	ret0, _ := ret[0].(*argowf.GetWorkflowTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowTemplates indicates an expected call of GetWorkflowTemplates.
func (mr *MockClientMockRecorder) GetWorkflowTemplates(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowTemplates", reflect.TypeOf((*MockClient)(nil).GetWorkflowTemplates), namespace)
}

// GetWorkflows mocks base method.
func (m *MockClient) GetWorkflows(namespace string) (*argowf.GetWorkflowsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflows", namespace)
	ret0, _ := ret[0].(*argowf.GetWorkflowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflows indicates an expected call of GetWorkflows.
func (mr *MockClientMockRecorder) GetWorkflows(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflows", reflect.TypeOf((*MockClient)(nil).GetWorkflows), namespace)
}

// SumbitWorkflowFromWftpl mocks base method.
func (m *MockClient) SumbitWorkflowFromWftpl(wftplName, targetNamespace string, opts argowf.SubmitOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumbitWorkflowFromWftpl", wftplName, targetNamespace, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumbitWorkflowFromWftpl indicates an expected call of SumbitWorkflowFromWftpl.
func (mr *MockClientMockRecorder) SumbitWorkflowFromWftpl(wftplName, targetNamespace, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumbitWorkflowFromWftpl", reflect.TypeOf((*MockClient)(nil).SumbitWorkflowFromWftpl), wftplName, targetNamespace, opts)
}
