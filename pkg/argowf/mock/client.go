// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/argowf/client.go

// Package mock_argowf is a generated GoMock package.
package mock_argowf

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// IsRunningWorkflowByContractId mocks base method.
func (m *MockClient) IsRunningWorkflowByContractId(ctx context.Context, nameSpace, contractId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunningWorkflowByContractId", ctx, nameSpace, contractId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRunningWorkflowByContractId indicates an expected call of IsRunningWorkflowByContractId.
func (mr *MockClientMockRecorder) IsRunningWorkflowByContractId(ctx, nameSpace, contractId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunningWorkflowByContractId", reflect.TypeOf((*MockClient)(nil).IsRunningWorkflowByContractId), ctx, nameSpace, contractId)
}

// SumbitWorkflowFromWftpl mocks base method.
func (m *MockClient) SumbitWorkflowFromWftpl(ctx context.Context, wftplName, namespace string, parameters []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumbitWorkflowFromWftpl", ctx, wftplName, namespace, parameters)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumbitWorkflowFromWftpl indicates an expected call of SumbitWorkflowFromWftpl.
func (mr *MockClientMockRecorder) SumbitWorkflowFromWftpl(ctx, wftplName, namespace, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumbitWorkflowFromWftpl", reflect.TypeOf((*MockClient)(nil).SumbitWorkflowFromWftpl), ctx, wftplName, namespace, parameters)
}

// WaitWorkflows mocks base method.
func (m *MockClient) WaitWorkflows(ctx context.Context, namespace string, workflowNames []string, ignoreNotFound, quiet bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitWorkflows", ctx, namespace, workflowNames, ignoreNotFound, quiet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitWorkflows indicates an expected call of WaitWorkflows.
func (mr *MockClientMockRecorder) WaitWorkflows(ctx, namespace, workflowNames, ignoreNotFound, quiet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitWorkflows", reflect.TypeOf((*MockClient)(nil).WaitWorkflows), ctx, namespace, workflowNames, ignoreNotFound, quiet)
}
